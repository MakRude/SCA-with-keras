{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# This method was taken from the ASCAD code and adapted very heavily\n",
    "\n",
    "def calc_tst_acc(best_model, X_attack, Y_attack, num_classes=3, seed=None, key_idx=None):\n",
    "    \n",
    "    if key_idx is not None:\n",
    "        tmp_output = \"++ calculating accuracy for seed {} and key {}\".format(seed,key_idx)\n",
    "    else:\n",
    "        tmp_output =  \"++ calculating accuracy for seed {}\".format(seed)\n",
    "    print(tmp_output)\n",
    "    \n",
    "    # Get the input layer shape\n",
    "    input_layer_shape = best_model.get_layer(index=0).input_shape\n",
    "    # Sanity check\n",
    "    if input_layer_shape[1] != len(X_profiling[0]):\n",
    "        print(\"Error: model input shape %d instead of %d is not expected ...\" % (input_layer_shape[1], len(X_profiling[0])))\n",
    "        sys.exit(-1)\n",
    "    # Adapt the data shape according our model input\n",
    "    if len(input_layer_shape) == 2:\n",
    "        # This is a MLP\n",
    "        Reshaped_X_attack = X_attack\n",
    "    elif len(input_layer_shape) == 3:\n",
    "        # This is a CNN: expand the dimensions\n",
    "        Reshaped_X_attack = X_attack.reshape((X_attack.shape[0], X_attack.shape[1], 1))\n",
    "    else:\n",
    "        print(\"Error: model input shape length %d is not expected ...\" % len(input_layer_shape))\n",
    "        sys.exit(-1)\n",
    "    \n",
    "    predictions = np.argmax(best_model.predict(Reshaped_X_attack), 1)\n",
    "#     print(\"predictions: \", predictions)\n",
    "#     print(\"Y_profiling: \", Y_attack)\n",
    "#     print(\"predictions cmp Y_profiling: \", (Y_attack == predictions))\n",
    "    \n",
    "    accuracy = sum(Y_attack == predictions)/TEST_NUM \n",
    "    return accuracy\n",
    "\n",
    "def calc_advantage(tst_acc):\n",
    "    return (tst_acc - .62) / (1-.62)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Saves pre-defined history parameters that keras training returns. It assumes existence of validation data.\n",
    "def save_history(training_model, history, seed=None, key_idx=None, att=None, valid_val=None):\n",
    "    # SAVE HISTORY\n",
    "    ## SAVE HISTORY: LOSS per epoch\n",
    "    save_file(training_model, history.history['loss'], case=LOSS_CONST, seed=seed, key=key_idx)\n",
    "    ## SAVE HISTORY: ACCURACY per epoch\n",
    "    save_file(training_model, history.history['accuracy'], case=ACC_CONST, seed=seed, key=key_idx)\n",
    "    if valid_val is not None:\n",
    "        ## SAVE HISTORY: VAL_LOSS per epoch\n",
    "        save_file(training_model, history.history['val_loss'], case=VAL_LOSS_CONST, seed=seed, key=key_idx)\n",
    "        ## SAVE HISTORY: VAL_ACCURACY per epoch\n",
    "        save_file(training_model, history.history['val_accuracy'], case=VAL_ACC_CONST, seed=seed, key=key_idx)\n",
    "\n",
    "    ## SAVE HISTORY: GRAPH\n",
    "    save_file(training_model, history, case=TRN_GRPH_CONST, seed=seed, key=key_idx, att=att)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "MODEL_CONST = 0\n",
    "LOSS_CONST = 1\n",
    "ACC_CONST = 2\n",
    "ADV_CONST = 3\n",
    "TRN_GRPH_CONST = 4\n",
    "ADV_GRPH_CONST = 5\n",
    "TST_ACC_CONST = 6\n",
    "VAL_LOSS_CONST = 7\n",
    "VAL_ACC_CONST = 8\n",
    "VAL_ADV_CONST = 9\n",
    "TST_ADV_CONST = 10\n",
    "\n",
    "\n",
    "# fun little thing for naming saved files\n",
    "# ('/start_of_file_name', '.file_extension', '/file_folder') # The index comes from the constants above\n",
    "save_list = [('/mdl', '.h5', \"/model\"),\n",
    "             ('/trn_lss', '.npy', \"/trn_loss\"),\n",
    "             ('/trn_acc', '.npy', \"/trn_accuracy\"),\n",
    "             ('/trn_adv', '.npy', \"/trn_advantage\"),\n",
    "             ('/trn_grph', '.png', \"/graphs\"),\n",
    "             ('/adv_grph', '.png', \"\"),\n",
    "             ('/tst_acc', '.npy', \"\"),\n",
    "             ('/val_lss', '.npy', \"/val_loss\"),\n",
    "             ('/val_acc', '.npy', \"/val_accuracy\"),\n",
    "             ('/val_adv', '.npy', \"/val_advantage\"),\n",
    "             ('/tst_adv', '.npy', \"\")]\n",
    "\n",
    "\n",
    "def get_file_loc(save_loc, case):\n",
    "    loc = save_loc + save_list[case][2]\n",
    "    Path(loc).mkdir(parents=True, exist_ok=True)\n",
    "    return loc\n",
    "\n",
    "def get_file_path(save_loc, case, seed=None, key=None):\n",
    "    tmp_str = get_file_loc(save_loc, case) + save_list[case][0]\n",
    "    \n",
    "    if seed is not None:\n",
    "        tmp_str = tmp_str + \"_s{:04d}\".format(seed)\n",
    "    \n",
    "    if key is not None:\n",
    "        tmp_str = tmp_str + \"_k{:02d}\".format(key)\n",
    "    return tmp_str + \"{}\".format(save_list[case][1])\n",
    "\n",
    "def save_file(save_loc, file, case=-1, seed=None, key=None, att=None):\n",
    "    \n",
    "    file_path = get_file_path(save_loc, case, seed, key)\n",
    "    print(\"++ Saving: \", file_path)\n",
    "    \n",
    "\n",
    "    if case in [LOSS_CONST, ACC_CONST, VAL_LOSS_CONST, VAL_ACC_CONST, VAL_ADV_CONST]:\n",
    "        # This means that file is a numpy array\n",
    "        np.savetxt(file_path, file)\n",
    "    \n",
    "    elif case in [TST_ADV_CONST, TST_ACC_CONST]:\n",
    "        # This means that file is a dictionary\n",
    "        np.save(file_path, file)\n",
    "    \n",
    "    \n",
    "    elif case in [TRN_GRPH_CONST]:\n",
    "        # This means we want to save a graph of a singular key\n",
    "        # The graph needs the accuracy,  arrays\n",
    "        # File is history\n",
    "        plt.plot(file.history['accuracy'])\n",
    "        plt.plot(file.history['loss'])\n",
    "        if validation_split_const is not None:\n",
    "            plt.plot(file.history['val_accuracy'])\n",
    "            plt.plot(file.history['val_loss'])\n",
    "        tmp_title = 'Training Graph: ' + 'seed' +'{:02d}'.format(seed)\n",
    "        if key is not None:\n",
    "            tmp_title = tmp_title +\", key: \"+'{:02d}'.format(key)\n",
    "        if not att == None:\n",
    "            tmp_title = tmp_title + ', att: ' + '{:01d}'.format(att)\n",
    "        plt.title(tmp_title)\n",
    "        plt.ylabel('%')\n",
    "        plt.xlabel('Epoch')\n",
    "        if validation_split_const is not None:\n",
    "            plt.legend(['Acc', 'Valid. Acc', 'Loss', 'Valid. Loss'], loc='upper left')\n",
    "        else:\n",
    "            plt.legend(['Acc', 'Loss'], loc='upper left')\n",
    "        plt.savefig(file_path)\n",
    "        plt.clf()\n",
    "        \n",
    "    elif case in [ADV_GRPH_CONST]:\n",
    "        # This means we want to save a graph of a singular key\n",
    "        # The graph needs the accuracy,  arrays\n",
    "        # File is history\n",
    "        plt.plot(file.history['trn_advantage'])\n",
    "        if validation_split_const is not None:\n",
    "            plt.plot(file.history['val_advantage'])\n",
    "        \n",
    "        tmp_title = 'Advantage Graph: '\n",
    "        if seed is not None:\n",
    "            tmp_title = tmp_title + 'seed' +'{:02d}, '.format(seed)\n",
    "        if key is not None:\n",
    "            tmp_title = tmp_title +\"key: \"+'{:02d}, '.format(key)\n",
    "        if not att == None:\n",
    "            tmp_title = tmp_title + ', att: ' + '{:01d}'.format(att)\n",
    "            \n",
    "        plt.title(tmp_title)\n",
    "        plt.ylabel('%')\n",
    "        plt.xlabel('Epoch')\n",
    "        if validation_split_const is not None:\n",
    "            plt.legend(['trn. Adv', 'val. Adv'], loc='upper left')\n",
    "        else:\n",
    "            plt.legend(['trn. Adv'], loc='upper left')\n",
    "        plt.savefig(file_path)\n",
    "        plt.clf()\n",
    "    else:\n",
    "        raise ValueError(\"save_file was called with a wrong case\")\n",
    "        exit(-1)\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
